# -*- coding: utf-8 -*-
"""Mental_Health_in_Tech_Survey.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r2xdQ_ggF_ef8g9m-hU5fnrv4BP7xnTU

## Datasets Source
This dataset was from OSMH/OSMI Mental Health in Tech Survey 2014:
https://osmihelp.org/research

## Dataset Information
This dataset is from a 2014 survey that measures attitudes towards mental health and frequency of mental health disorders in the tech workplace. This training dataset contains 1007 records, including 510 persons who sought treatment for a mental health condition and 497 persons without seeking treatment. To study this dataset, it may help to assist companies in making supportive environments for those impacted by mental health disorders. The "treatment" field is a class label used to divide into groups (sought treatment or not).

## Attribute Information:
This dataset contains the following data:

1. Age
2. Gender
3. self_employed: Are you self-employed?
4. family_history: Do you have a family history of mental illness?
5. work_interfere: If you have a mental health condition, do you feel that it interferes with your work?
6. no_employees: How many employees does your company or organization have?
remote_work: Do you work remotely (outside of an office) at least 50% of the time?
7. tech_company: Is your employer primarily a tech company/organization?
8. benefits: Does your employer provide mental health benefits?
9. care_options: Do you know the options for mental health care your employer provides?
10. wellness_program: Has your employer ever discussed mental health as part of an employee wellness program?
11. seek_help: Does your employer provide resources to learn more about mental health issues and how to seek help?
12. anonymity: Is your anonymity protected if you choose to take advantage of mental health or substance abuse treatment resources?
13. leave: How easy is it for you to take medical leave for a mental health condition?
14. mentalhealthconsequence: Do you think that discussing a mental health issue with your employer would have negative consequences?
15. physhealthconsequence: Do you think that discussing a physical health issue with your employer would have negative consequences?
16. coworkers: Would you be willing to discuss a mental health issue with your coworkers?
17. supervisor: Would you be willing to discuss a mental health issue with your direct supervisor(s)?
18. mentalhealthinterview: Would you bring up a mental health issue with a potential employer in an interview?
19. physhealthinterview: Would you bring up a physical health issue with a potential employer in an interview?
20. mentalvsphysical: Do you feel that your employer takes mental health as seriously as physical health?
21. obs_consequence: Have you heard of or observed negative consequences for coworkers with mental health conditions in your workplace?
22. treatment: Have you sought treatment for a mental health condition?

### Download the training set
"""

# 從Google drive上下載壓縮檔
!gdown --id 1HZnYBOe8Z04UzK6T0BXeTH5oaU_ABjIz

!unzip project2.zip
# if seeing the message: "replace project1_test.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename:"
# you may enter "A"

# Commented out IPython magic to ensure Python compatibility.
#匯入所需模組
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

#讀取訓練集檔案
df = pd.read_csv('project2_train.csv')
df.columns

#顯示前五筆資料來測試訓練集是否讀取成功
df.head()

#每個index內有幾種不同回答
for col in df.columns:
  print('Unique values in {} :'.format(col), len(df[col].unique()))

#檢查資料類型,並提供缺失值詳細信息
df.info()

#統計具有缺失值的項目內共有幾個缺失值
df.isnull().sum().sort_values(ascending=False)

#查看work_interfere內有幾種不同回答
df['work_interfere'].unique()

#查看self_employed內有幾種不同回答
df.self_employed.unique()

#查看Gender內有幾種不同回答
df.Gender.unique()

#將Gender內所有的回答分為三類
other  = ['A little about you', 'p', 'Nah', 'Enby', 'Trans-female','something kinda male?','queer/she/they','non-binary','All','fluid', 'Genderqueer','Androgyne', 'Agender',
          'Guy (-ish) ^_^', 'male leaning androgynous','Trans woman','Neuter', 'Female (trans)','queer','ostensibly male unsure what that really means','trans']
male   = ['male', 'Male','M', 'm', 'Male-ish', 'maile','Cis Male','Mal', 'Male (CIS)','Make','Male ', 'Man', 'msle','cis male', 'Cis Man','Malr','Mail']
female = ['Female', 'female','Cis Female', 'F','f','Femake', 'woman','Female ','cis-female/femme','Female (cis)','femail','Woman','female']

#查看Gender內最小值與最大值
df.Age.min(), df.Age.max()

#統計treatment內0與1的總數
df.treatment = df.treatment.astype('category')
df.treatment = df.treatment.cat.codes
df.treatment.value_counts()

#查看Age內有幾種不同回答
df['Age'].unique()

"""### The stage is yours"""

#刪除age內答案小於0大於100的項目
df.drop(df[df['Age'] < 0].index, inplace = True)
df.drop(df[df['Age'] > 100].index, inplace = True)
df['Age'].unique()

#將Gender內的回答都轉換成Male,Female及Other
df['Gender'].replace(male, 'Male', inplace = True)

df['Gender'].replace(female, 'Female', inplace = True)

df["Gender"].replace(other, 'Other', inplace = True)

df['Gender'].value_counts()

df.info()

df['work_interfere'] = df['work_interfere'].fillna('Don\'t know' )
df['work_interfere'].unique()

df['self_employed'] = df['self_employed'].fillna('No')
df['self_employed'].unique()

df.isnull().sum()

df.columns

list_col=['Age', 'Gender', 'self_employed', 'family_history', 'work_interfere',
       'no_employees', 'remote_work', 'tech_company', 'benefits',
       'care_options', 'wellness_program', 'seek_help', 'anonymity', 'leave',
       'mental_health_consequence', 'phys_health_consequence', 'coworkers',
       'supervisor', 'mental_health_interview', 'phys_health_interview',
       'mental_vs_physical', 'obs_consequence', 'treatment']

for col in list_col:
    print('{} :{} ' . format(col.upper(),df[col].unique()))

from sklearn.preprocessing import LabelEncoder
object_cols = ['Age', 'Gender', 'self_employed', 'family_history', 'work_interfere',
       'no_employees', 'remote_work', 'tech_company', 'benefits',
       'care_options', 'wellness_program', 'seek_help', 'anonymity', 'leave',
       'mental_health_consequence', 'phys_health_consequence', 'coworkers',
       'supervisor', 'mental_health_interview', 'phys_health_interview',
       'mental_vs_physical', 'obs_consequence', 'treatment']
label_encoder = LabelEncoder()
for col in object_cols:
    label_encoder.fit(df[col])
    df[col] = label_encoder.transform(df[col])

df['treatment'].value_counts()

# Compute the correlation matrix
corr = df.corr()

mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True

f, ax = plt.subplots(figsize=(15, 15))

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap='Purples', vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, recall_score, plot_roc_curve, confusion_matrix, classification_report, precision_recall_curve, auc
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier,ExtraTreesClassifier
from xgboost.sklearn import XGBClassifier
import xgboost as xgb
from sklearn import metrics

from sklearn.model_selection import train_test_split
# Train and Test set
X = df.drop('treatment', axis=1)
y = df['treatment']
# Splitting
X_train, X_val, y_train, y_val = train_test_split(X, y, stratify = y, test_size = 0.2, random_state = 409570406) # random_state改成你自己的學號，純數字

key = ['LogisticRegression','KNeighborsClassifier','DecisionTreeClassifier','RandomForestClassifier','GradientBoostingClassifier','AdaBoostClassifier','XGBClassifier','ExtraTreesClassifier']
value = [LogisticRegression(), KNeighborsClassifier(n_neighbors = 2, weights ='uniform'), DecisionTreeClassifier(random_state=10), RandomForestClassifier(n_estimators=60, random_state=0), GradientBoostingClassifier(random_state=20), AdaBoostClassifier(), xgb.XGBClassifier(random_state=0,booster="gbtree"), ExtraTreesClassifier(n_estimators=250,random_state=0)]
models = dict(zip(key,value))
models

predicted =[]
for name,algo in models.items():
    model=algo
    model.fit(X_train,y_train)
    predict = model.predict(X_val)
    acc = accuracy_score(y_val, predict)
    predicted.append(acc)
    print(name,acc)

plt.figure(figsize = (10,5))
ax = sns.barplot(x = predicted, y = key, palette='Purples', order=predicted.sort())
plt.title("Plotting the Model Accuracies", fontsize=16, fontweight="bold")

# from sklearn.model_selection import GridSearchCV
# from sklearn.svm import LinearSVC
# C_grid = [0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 1, 2, 3, 4, 5, 10, 20, 30, 40]
# param_grid = {'C':C_grid}
# grid = GridSearchCV(LinearSVC(), param_grid, cv=10, scoring='f1')
# grid.fit(X_train, y_train)

# print('Best paras',grid.best_params_)

# param_grid = {'C': [0.0001, 0.01, 0.1, 0.3, 0.5, 1, 10, 100], 'gamma':[100, 10, 1, 0.1, 0.01, 0.001]}
# from sklearn.svm import SVC
# model = GridSearchCV(SVC(), param_grid, cv=10)

# model.fit(X_train, y_train)

# grid.best_params_

from sklearn.ensemble import ExtraTreesClassifier
forest = ExtraTreesClassifier(n_estimators=250,random_state=0)
forest.fit(X_train, y_train)
importances = forest.feature_importances_
std = np.std([tree.feature_importances_ for tree in forest.estimators_],
             axis=0)
indices = np.argsort(importances)[::-1]

from sklearn.svm import LinearSVC

# 模型建構與擬和
lsvm  = LinearSVC()
lsvm .fit(X_train, y_train)

# 模型預測
y_pred = lsvm .predict(X_val)

# 分類準確率
print("分類準確率：",round(lsvm .score(X_val, y_val),4))

from sklearn.metrics import classification_report,confusion_matrix
print('Classification Report: \n', classification_report(％y_val,y_pred))

sns.heatmap(confusion_matrix(y_val,y_pred),annot=True,fmt="d")

fpr, tpr, thresholds = metrics.roc_curve(y_val, y_pred)
plt.figure(figsize=(8,8))
roc_auc = metrics.auc(fpr, tpr)
plt.plot(fpr, tpr, color='darkorange', label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.0])
plt.rcParams['font.size'] = 12
plt.title('ROC Curve', fontweight = 'bold', fontsize=16)
plt.xlabel('False Positive Rate (1 - Specificity)', fontweight = 'bold', fontsize=14)
plt.ylabel('True Positive Rate (Sensitivity)', fontweight = 'bold', fontsize=14)
plt.legend(loc="lower right")
plt.show()
metrics.roc_curve(y_val, y_pred)

# from sklearn import svm, preprocessing, metrics

# # 建立 SVC 模型
# svc = svm.SVC()
# svc_fit = svc.fit(X_train, y_train)

# # 預測
# test_y_predicted = svc.predict(X_val)

# # 績效
# accuracy = metrics.accuracy_score(y_val, test_y_predicted)
# print(accuracy)

"""### Make prediction and submission file"""

x_test = pd.read_csv('project2_test.csv')

x_test.info()

x_test.Gender.unique()

x_test['Gender'].replace(['Male','M','male','m','Man','Male ','Male-ish'], 'Male', inplace = True)
x_test['Gender'].replace(['female','Female','F','f','Female ','Femake'], 'Female', inplace = True)
x_test['Gender'].replace(['Female (trans)','Agender'], 'Other', inplace = True)
x_test['Gender'].value_counts()

print(x_test['Age'].unique())

x_test['work_interfere'] = x_test['work_interfere'].fillna('Don\'t know' )
x_test['work_interfere'].unique()

x_test['self_employed'] = x_test['self_employed'].fillna('No')
x_test['self_employed'].unique()

x_test.isnull().sum()

x_test.columns

list_col=['Age', 'Gender', 'self_employed', 'family_history', 'work_interfere',
       'no_employees', 'remote_work', 'tech_company', 'benefits',
       'care_options', 'wellness_program', 'seek_help', 'anonymity', 'leave',
       'mental_health_consequence', 'phys_health_consequence', 'coworkers',
       'supervisor', 'mental_health_interview', 'phys_health_interview',
       'mental_vs_physical', 'obs_consequence']

for col in list_col:
    print('{} :{} ' . format(col.upper(),x_test[col].unique()))

from sklearn.preprocessing import LabelEncoder
object_cols = ['Age', 'Gender', 'self_employed', 'family_history', 'work_interfere',
       'no_employees', 'remote_work', 'tech_company', 'benefits',
       'care_options', 'wellness_program', 'seek_help', 'anonymity', 'leave',
       'mental_health_consequence', 'phys_health_consequence', 'coworkers',
       'supervisor', 'mental_health_interview', 'phys_health_interview',
       'mental_vs_physical', 'obs_consequence']
label_encoder = LabelEncoder()
for col in object_cols:
    label_encoder.fit(x_test[col])
    x_test[col] = label_encoder.transform(x_test[col])
x_test

df_submit = pd.DataFrame([], columns=['Id', 'Treatment'])
df_submit['Id'] = [f'{i:03d}' for i in range(len(x_test))]
df_submit['Treatment'] = model.predict(x_test)

df_submit.to_csv('submission.csv', index=None)